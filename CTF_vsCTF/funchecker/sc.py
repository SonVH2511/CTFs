def __ROL8__(n, rotations, bits=64):
    rotations %= bits
    return ((n << rotations) | (n >> (bits - rotations))) & ((1 << bits) - 1)


def __ROR8__(n, rotations, bits=64):
    rotations %= bits
    return ((n >> rotations) | (n << (bits - rotations))) & ((1 << bits) - 1)


print(hex(__ROR8__(0x589FDA54EB82CC74, 0x60)))
print(hex(__ROL8__(0x589FDA54EB82CC74, 0x40)))

const = [0xfa97d8710c8b9b54, 0xeb82cc74589fda54, 0xee928c654d8bdf01, 0x5a35d0732e291bfe, 0xff879860199f9e01, 0x690aec7cd215d8fe, 0x7d0fb86893159cab, 0xf30c0333f3c0fff, 0xbec388645cda9f54, 0xf30c0333f3c0fff, 0x5f2590623b3d1eab, 0xc9a8e47ef0b75854, 0x226e7c5abd78d301, 0xddadb06ab1b71c01, 0x5f61c4322e6d4faa, 0x6c1aac6dc701ddab, 0xf7494632a6c5efe, 0xeb82cc74589fda54, 0x226e7c5abd78d301, 0xbbd3c87549ce9a01,
         0xffc3cc300ccfcf00, 0xfa97d8710c8b9b54, 0xffc3cc300ccfcf00, 0xbbd3c87549ce9a01, 0xeb82cc74589fda54, 0x5f61c4322e6d4faa, 0x7d0fb86893159cab, 0xafd69c6108cede54, 0x226e7c5abd78d301, 0x7d0fb86893159cab, 0x4e3084676f295fab, 0x5a35d0732e291bfe, 0x5f61c4322e6d4faa, 0xfa97d8710c8b9b54, 0xf7494632a6c5efe, 0x226e7c5abd78d301, 0x4e3084676f295fab, 0xf30c0333f3c0fff, 0x5a35d0732e291bfe, 0x88ecf47ab5f25901]
ans = ""
flag_comp = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=<>,.?/{}[]\|~:;"\''


for i in range(0x28):
    for c in flag_comp:
        v9 = ord(c)
        v10 = 4
        v11 = 6
        for j in range(5):
            v9 = v9 ^ (__ROR8__(v9, v11) ^ __ROL8__(v9, v10))
            v10 *= 2
            v11 *= 2
        if (v9 == const[i]):
            # print(c, " ", hex(v9), " ", i, " ", const[i])
            ans += c
            break
print(ans)

# const = [0x54, 0x9B, 0x8B, 0x0C, 0x71, 0xD8, 0x97, 0xFA, 0x54, 0xDA,
#          0x9F, 0x58, 0x74, 0xCC, 0x82, 0xEB, 0x01, 0xDF, 0x8B, 0x4D,
#          0x65, 0x8C, 0x92, 0xEE, 0xFE, 0x1B, 0x29, 0x2E, 0x73, 0xD0,
#          0x35, 0x5A, 0x01, 0x9E, 0x9F, 0x19, 0x60, 0x98, 0x87, 0xFF,
#          0xFE, 0xD8, 0x15, 0xD2, 0x7C, 0xEC, 0x0A, 0x69, 0xAB, 0x9C,
#          0x15, 0x93, 0x68, 0xB8, 0x0F, 0x7D, 0xFF, 0x0F, 0x3C, 0x3F,
#          0x33, 0xC0, 0x30, 0x0F, 0x54, 0x9F, 0xDA, 0x5C, 0x64, 0x88,
#          0xC3, 0xBE, 0xFF, 0x0F, 0x3C, 0x3F, 0x33, 0xC0, 0x30, 0x0F,
#          0xAB, 0x1E, 0x3D, 0x3B, 0x62, 0x90, 0x25, 0x5F, 0x54, 0x58,
#          0xB7, 0xF0, 0x7E, 0xE4, 0xA8, 0xC9, 0x01, 0xD3, 0x78, 0xBD,
#          0x5A, 0x7C, 0x6E, 0x22, 0x01, 0x1C, 0xB7, 0xB1, 0x6A, 0xB0,
#          0xAD, 0xDD, 0xAA, 0x4F, 0x6D, 0x2E, 0x32, 0xC4, 0x61, 0x5F,
#          0xAB, 0xDD, 0x01, 0xC7, 0x6D, 0xAC, 0x1A, 0x6C, 0xFE, 0x5E,
#          0x6C, 0x2A, 0x63, 0x94, 0x74, 0x0F, 0x54, 0xDA, 0x9F, 0x58,
#          0x74, 0xCC, 0x82, 0xEB, 0x01, 0xD3, 0x78, 0xBD, 0x5A, 0x7C,
#          0x6E, 0x22, 0x01, 0x9A, 0xCE, 0x49, 0x75, 0xC8, 0xD3, 0xBB,
#          0x00, 0xCF, 0xCF, 0x0C, 0x30, 0xCC, 0xC3, 0xFF, 0x54, 0x9B,
#          0x8B, 0x0C, 0x71, 0xD8, 0x97, 0xFA, 0x00, 0xCF, 0xCF, 0x0C,
#          0x30, 0xCC, 0xC3, 0xFF, 0x01, 0x9A, 0xCE, 0x49, 0x75, 0xC8,
#          0xD3, 0xBB, 0x54, 0xDA, 0x9F, 0x58, 0x74, 0xCC, 0x82, 0xEB,
#          0xAA, 0x4F, 0x6D, 0x2E, 0x32, 0xC4, 0x61, 0x5F, 0xAB, 0x9C,
#          0x15, 0x93, 0x68, 0xB8, 0x0F, 0x7D, 0x54, 0xDE, 0xCE, 0x08,
#          0x61, 0x9C, 0xD6, 0xAF, 0x01, 0xD3, 0x78, 0xBD, 0x5A, 0x7C,
#          0x6E, 0x22, 0xAB, 0x9C, 0x15, 0x93, 0x68, 0xB8, 0x0F, 0x7D,
#          0xAB, 0x5F, 0x29, 0x6F, 0x67, 0x84, 0x30, 0x4E, 0xFE, 0x1B,
#          0x29, 0x2E, 0x73, 0xD0, 0x35, 0x5A, 0xAA, 0x4F, 0x6D, 0x2E,
#          0x32, 0xC4, 0x61, 0x5F, 0x54, 0x9B, 0x8B, 0x0C, 0x71, 0xD8,
#          0x97, 0xFA, 0xFE, 0x5E, 0x6C, 0x2A, 0x63, 0x94, 0x74, 0x0F,
#          0x01, 0xD3, 0x78, 0xBD, 0x5A, 0x7C, 0x6E, 0x22, 0xAB, 0x5F,
#          0x29, 0x6F, 0x67, 0x84, 0x30, 0x4E, 0xFF, 0x0F, 0x3C, 0x3F,
#          0x33, 0xC0, 0x30, 0x0F, 0xFE, 0x1B, 0x29, 0x2E, 0x73, 0xD0,
#          0x35, 0x5A, 0x01, 0x59, 0xF2, 0xB5, 0x7A, 0xF4, 0xEC, 0x88,
#          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
# # from z3 import *

# def __ROL8__(n, rotations, bits=64):
#     return ((n << rotations) | (n >> (bits - rotations))) & ((1 << bits) - 1)

# # print(hex((0-0x3D4D51C2D82B14B1) & 0xffffffffffffffff))
# # a1 = [BitVec(f'a1[{i}]', 32) for i in range(5)]
# a1 = [0x61617B6674637376, 0x6161616161616161,
#       0x6161616161616161, 0x6161616161616161, 0x7D61616161616161]
# # solver = Solver()
# # print("))")
# a3 = 0
# v4 = (a3 + 0x60EA27EEADC0B5D6) & 0xffffffffffffffff
# v5 = (a3 - 0x3D4D51C2D82B14B1) & 0xffffffffffffffff
# v6 = (a3 + 0x61C8864E7A143579) & 0xffffffffffffffff
# p = 0
# # print(hex(a1[len(a1)-4]))
# while ((a1[p] <= a1[len(a1)-4]) or p == 0):
#     # print(":))")
#     v4 = (0x9E3779B185EBCA87 * __ROL8__((0xC2B2AE3D27D4EB4F *
#           a1[p+0] + v4) & 0xffffffffffffffff, 31)) & 0xffffffffffffffff
#     v5 = 0x9E3779B185EBCA87 * \
#         __ROL8__(((0xC2B2AE3D27D4EB4F * a1[p+1]) + v5)
#                  & 0xffffffffffffffff, 31) & 0xffffffffffffffff
#     a3 = 0x9E3779B185EBCA87 * \
#         __ROL8__(((0xC2B2AE3D27D4EB4F * a1[p+2]) + a3)
#                  & 0xffffffffffffffff, 31) & 0xffffffffffffffff
#     v6 = 0x9E3779B185EBCA87 * \
#         __ROL8__(((0xC2B2AE3D27D4EB4F * a1[p+3]) + v6)
#                  & 0xffffffffffffffff, 31) & 0xffffffffffffffff
#     p += 4
#     print(hex(v4), " ", hex(v5), " ", hex(a3), " ", hex(v6))
# v7 = (((0x9E3779B185EBCA87 * (((0x9E3779B185EBCA87 * (((0x9E3779B185EBCA87 * ((((0x9E3779B185EBCA87 * (((0x9E3779B185EBCA87 * __ROL8__((0xC2B2AE3D27D4EB4F * v4) & 0xffffffffffffffff, 31)) & 0xffffffffffffffff) ^ ((__ROL8__(v6, 18) + __ROL8__(a3, 12) + __ROL8__(v5, 7) + __ROL8__(v4, 1)) & 0xffffffffffffffff)) + 0x85EBCA77C2B2AE63) & 0xffffffffffffffff) ^ (0x9E3779B185EBCA87 *
#       __ROL8__((0xC2B2AE3D27D4EB4F * v5) & 0xffffffffffffffff, 31))) & 0xffffffffffffffff) + 0x85EBCA77C2B2AE63) & 0xffffffffffffffff) ^ ((0x9E3779B185EBCA87 * __ROL8__((0xC2B2AE3D27D4EB4F * a3) & 0xffffffffffffffff, 31)) & 0xffffffffffffffff)) + 0x85EBCA77C2B2AE63) & 0xffffffffffffffff) ^ ((0x9E3779B185EBCA87 * __ROL8__((0xC2B2AE3D27D4EB4F * v6) & 0xffffffffffffffff, 31)) & 0xffffffffffffffff))) & 0xffffffffffffffff) + 0x85EBCA77C2B2AE63) & 0xffffffffffffffff
# print(hex(v7))
# i = 0x28 + v7
# while (p+1 <= len(a1)):
#     i = (((0x9E3779B185EBCA87 * __ROL8__(((0x9E3779B185EBCA87 * __ROL8__((0xC2B2AE3D27D4EB4F *
#          a1[p]) & 0xffffffffffffffff, 31)) & 0xffffffffffffffff) ^ i, 27)) & 0xffffffffffffffff) + 0x85EBCA77C2B2AE63) & 0xffffffffffffffff
#     print(hex(i))
#     p += 1
# print(p)
# # 0x39AC9E456A5C0216
# # 0x4CB08EFC49304275
# # 0xF260C6325FDFDB1C
# # 0x5FDB98ABAD090AAD

# print(len(const))
# out = []
# for i in range(0, len(const), 8):
#     tmp = 0
#     cnt = 7

#     while cnt != -1:
#         tmp <<= 8
#         tmp += const[i+cnt]
#         cnt -= 1
#     out.append(tmp)
# print(out)
# for i in out:
#     print(hex(i), end=", ")
