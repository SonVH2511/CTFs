from z3 import *

solver = Solver()
x = [BitVec(f'x[{i}]', 32) for i in range(335)]
y = [BitVec(f'y[{i}]', 32) for i in range(335)]


def Pad6Bit(a1):
    a1 &= 0xff
    return (2 * ((4 * (a1 & 0xF)) & 0x33 | (16 * (a1 & 0x3F)) & 0x303 | a1 & 3)) & 0x555 | (4 * (a1 & 0xF)) & 0x11 | (16 * (a1 & 0x3F)) & 0x101 | a1 & 1


def Pad7Bit(a1):
    a1 &= 0xff
    return a1 & 1 | (((a1 & 0x7F) & 0xffffffffffffffff) << 32) & 0x1000000001 | ((a1 & 0xF | (((a1 & 0x7F) & 0xffffffffffffffff) << 32) & 0x700000000F) << 16) & 0x40001000040001 | ((a1 & 3 | (((a1 & 0x7F) & 0xffffffffffffffff) << 32) & 0x3000000003 | ((a1 & 0xF | (((a1 & 0x7F) & 0xffffffffffffffff) << 32) & 0x700000000F) << 16) & 0x400030000C0003) << 8) & 0x40201008040201


def Pad12Bit(a1):
    a1 &= 0xffff
    return a1 & 1 | ((a1 & 0xFFF) << 8) & 0x10001 | (16 * (a1 & 0xff)) & 0x101 | (4 * (a1 & 0xF | ((a1 & 0xFFF) << 8) & 0xF000F | (16 * (a1 & 0xff)) & 0xF0F)) & 0x111111 | (2 * (a1 & 3 | ((a1 & 0xFFF) << 8) & 0x30003 | (16 * (a1 & 0xff)) & 0x303 | (4 * (a1 & 0xF | ((a1 & 0xFFF) << 8) & 0xF000F | (16 * (a1 & 0xff)) & 0xF0F)) & 0x333333)) & 0x555555


def Pad24Bit(a1):
    a1 &= 0xffffffff
    v2 = a1 & 3 | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0x300000003 | (((a1 & 0xffff) | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xFF0000FFFF) << 8) & 0x300030003 | (16 * ((a1 & 0xff) | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xFF000000FF | (((a1 & 0xffff) | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xFF0000FFFF) << 8) & 0xFF00FF00FF)) & 0x30303030303 | (4 * (a1 &
                                                                                                                                                                                                                                                                                                                                                                                                             0xF | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xF0000000F | (((a1 & 0xffff) | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xFF0000FFFF) << 8) & 0xF000F000F | (16 * ((a1 & 0xff) | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xFF000000FF | (((a1 & 0xffff) | (((a1 & 0xFFFFFF) & 0xffffffffffffffff) << 16) & 0xFF0000FFFF) << 8) & 0xFF00FF00FF)) & 0xF0F0F0F0F0F)) & 0x333333333333
    return (v2 | (2 * v2)) & 0x555555555555

# 1004557E33CE6F0


def Unpad64Bit_8Bit(a1):
    v2 = a1 & 1 | ((a1 & 0x101010101010101) >> 1) & 1 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x2000000001 | ((a1 & 0x100000001 | ((a1 & 0x101010101010101) >> 1) & 0x80000100800001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80402100804021) >> 4) & 0x2000000003 | ((a1 & 1 | ((a1 & 0x101010101010101) >> 1) & 0x80000000000001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80402000000001 | ((a1 & 0x100000001 | ((a1 & 0x101010101010101) >> 1) & 0x80000100800001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80402100804021) >> 4) & 0x80402010080403) >> 8) & 0x6000000007 | ((a1 & 1 | (
        (a1 & 0x101010101010101) >> 1) & 0x80000000000001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80002000000001 | ((a1 & 0x100000001 | ((a1 & 0x101010101010101) >> 1) & 0x80000100800001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80402100804021) >> 4) & 0x80002000080003 | ((a1 & 1 | ((a1 & 0x101010101010101) >> 1) & 0x80000000000001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80402000000001 | ((a1 & 0x100000001 | ((a1 & 0x101010101010101) >> 1) & 0x80000100800001 | ((a1 & 0x1000100010001 | ((a1 & 0x101010101010101) >> 1) & 0x81008100810081) >> 2) & 0x80402100804021) >> 4) & 0x80402010080403) >> 8) & 0x80006000180007) >> 16) & 0xE00000001F
    return (v2 | ((v2 >> 32) & 0xFF)) & 0xff


def EncodeMorton_12bit(a1, a2):
    a1 &= 0xff
    a2 &= 0xff

    v2 = Pad6Bit(a1)
    return v2 | (2 * (Pad6Bit(a2) & 0xffff))


def EncodeMorton_24bit(a1, a2):
    a1 &= 0xffff
    a2 &= 0xffff

    v2 = Pad12Bit(a1)
    return v2 | (2 * (Pad12Bit(a2) & 0xffffffff))


def EncodeMorton_48bit(a1, a2):
    a1 &= 0xffffffff
    a2 &= 0xffffffff

    v2 = Pad24Bit(a1)
    return v2 | (2 * Pad24Bit(a2))


def hash(a1):
    a1 &= 0xffffffff
    v2 = ((73244475 * (((73244475 * (a1 ^ (a1 >> 16))) & 0xffffffff) ^
          (((73244475 * (a1 ^ (a1 >> 16))) & 0xffffffff) >> 16)) & 0xffffffff) & 0xffffffff)
    return (v2 >> 16) ^ v2

# def hash_rev():


def numberOfSetBits(a1):
    a1 &= 0xffffffff
    return ((16843009 * ((((((a1 - ((a1 >> 1) & 0x55555555)) & 0x33333333) + (((a1 - ((a1 >> 1) & 0x55555555)) >> 2) & 0x33333333)) >> 4) + ((a1 - ((a1 >> 1) & 0x55555555)) & 0x33333333) + (((a1 - ((a1 >> 1) & 0x55555555)) >> 2) & 0x33333333)) & 0xF0F0F0F)) & 0xffffffff) >> 24


def EncodeMorton_9x7bit(a1, a2, a3, a4, a5, a6, a7, a8, a9):
    v9 = Pad7Bit(a1) & 0xffffffffffffffff
    v10 = (((2 * (Pad7Bit(a2) & 0xffffffffffffffff)) &
           0xffffffffffffffff) | v9) & 0xffffffffffffffff
    v11 = (((4 * (Pad7Bit(a3) & 0xffffffffffffffff)) &
           0xffffffffffffffff) | v10) & 0xffffffffffffffff
    v12 = (((8 * (Pad7Bit(a4) & 0xffffffffffffffff)) &
           0xffffffffffffffff) | v11) & 0xffffffffffffffff
    v13 = (((16 * (Pad7Bit(a5) & 0xffffffffffffffff)) &
           0xffffffffffffffff) | v12) & 0xffffffffffffffff
    v14 = (((32 * (Pad7Bit(a6) & 0xffffffffffffffff)) &
           0xffffffffffffffff) | v13) & 0xffffffffffffffff
    v15 = ((((Pad7Bit(a7) & 0xffffffffffffffff) << 6) &
           0xffffffffffffffff) | v14) & 0xffffffffffffffff
    v16 = ((((Pad7Bit(a8) & 0xffffffffffffffff) << 7) &
           0xffffffffffffffff) | v15) & 0xffffffffffffffff
    return (v16 | (((Pad7Bit(a9) & 0xffffffffffffffff) << 8) & 0xffffffffffffffff)) & 0xffffffffffffffff


correct_checksums = [0xcd4f2531, 0x23531b52, 0xc3c978e8, 0x8d5d6f3, 0x23531b52, 0xcd4f2531, 0xc3c978e8, 0x46a636a4, 0x23531b52, 0x9a9f4a63, 0xc3c978e8, 0x23531b52, 0xcd4f2531, 0x23531b52, 0xc3c978e8, 0xc3c978e8, 0xc3c978e8, 0x23531b52, 0xc3c978e8, 0xdfb6d245, 0xc3c978e8, 0xc3c978e8, 0x9a9f4a63, 0x8d5d6f3, 0x8d5d6f3, 0xcd4f2531, 0xc3c978e8, 0x46a636a4, 0xc3c978e8, 0x23531b52, 0x4c8214b, 0x8d5d6f3, 0xc3c978e8, 0x9a9f4a63, 0x23531b52, 0x9a9f4a63, 0xcd4f2531, 0x8d5d6f3, 0xdfb6d245, 0x9a9f4a63, 0x23531b52, 0x23531b52, 0xc3c978e8, 0x8d5d6f3, 0x8d5d6f3, 0x9a9f4a63, 0xcd4f2531, 0x8d5d6f3, 0x4c8214b, 0xc3c978e8, 0x4c8214b, 0x8d5d6f3, 0x8d5d6f3, 0x4c8214b, 0x9a9f4a63, 0xc3c978e8, 0x9a9f4a63, 0xc3c978e8, 0x23531b52, 0xcd4f2531, 0xc3c978e8, 0x8d5d6f3, 0x46a636a4, 0x9a9f4a63, 0xcd4f2531, 0x23531b52, 0x8d5d6f3, 0xdfb6d245, 0xc3c978e8, 0xcd4f2531, 0xc3c978e8, 0x9a9f4a63, 0x23531b52, 0x23531b52, 0x9a9f4a63, 0xcd4f2531, 0x23531b52, 0xcd4f2531, 0xcd4f2531, 0xc3c978e8, 0x23531b52, 0x4c8214b, 0x9a9f4a63, 0x8d5d6f3, 0x9a9f4a63, 0x8d5d6f3, 0x9a9f4a63, 0x8d5d6f3, 0x23531b52, 0x8d5d6f3, 0xc3c978e8, 0x66a79298, 0x8d5d6f3, 0x9a9f4a63, 0x23531b52, 0x23531b52, 0xcd4f2531, 0xc3c978e8, 0xc3c978e8, 0x9a9f4a63, 0x4c8214b, 0x9a9f4a63, 0x9a9f4a63, 0xdfb6d245, 0xc3c978e8, 0xdfb6d245, 0x23531b52, 0xc3c978e8, 0xcd4f2531, 0x23531b52, 0x8d5d6f3, 0x9a9f4a63, 0x4c8214b, 0x9a9f4a63, 0x4c8214b, 0xc3c978e8, 0x8d5d6f3, 0x9a9f4a63, 0x8d5d6f3, 0x9a9f4a63, 0xc3c978e8, 0xc3c978e8, 0x4c8214b, 0x9a9f4a63, 0x8d5d6f3, 0x4c8214b, 0x8d5d6f3, 0x23531b52, 0x8d5d6f3, 0x9a9f4a63, 0xc3c978e8, 0xc3c978e8, 0x46a636a4, 0x4c8214b, 0x8d5d6f3, 0x9a9f4a63, 0xc3c978e8, 0x8d5d6f3, 0x23531b52, 0xc3c978e8, 0xc3c978e8, 0x23531b52, 0x9a9f4a63, 0x4c8214b, 0x9a9f4a63, 0x8d5d6f3, 0x9a9f4a63, 0x9a9f4a63, 0x9a9f4a63, 0xc3c978e8, 0x23531b52, 0x4c8214b, 0x9a9f4a63, 0xc3c978e8, 0x9a9f4a63, 0x9a9f4a63, 0x8d5d6f3, 0x4c8214b, 0xa085b4c, 0xc3c978e8, 0x4c8214b, 0x46a636a4, 0x9a9f4a63, 0xc3c978e8, 0x9a9f4a63, 0x4c8214b,
                     0x23531b52, 0x9a9f4a63, 0x4c8214b, 0x8d5d6f3, 0x9a9f4a63, 0x46a636a4, 0x46a636a4, 0x9a9f4a63, 0xcd4f2531, 0x9a9f4a63, 0x4c8214b, 0xc3c978e8, 0x4c8214b, 0x8d5d6f3, 0xc3c978e8, 0xc3c978e8, 0x8d5d6f3, 0x9a9f4a63, 0x46a636a4, 0xc3c978e8, 0x23531b52, 0xc3c978e8, 0x8d5d6f3, 0x23531b52, 0x4c8214b, 0x4c8214b, 0x4c8214b, 0xc3c978e8, 0xc3c978e8, 0xcd4f2531, 0x9a9f4a63, 0xc3c978e8, 0x8d5d6f3, 0x8d5d6f3, 0x9a9f4a63, 0x9a9f4a63, 0x9a9f4a63, 0x8d5d6f3, 0xc3c978e8, 0xc3c978e8, 0xc3c978e8, 0x9a9f4a63, 0x9a9f4a63, 0x4c8214b, 0x9a9f4a63, 0xc3c978e8, 0xcd4f2531, 0x23531b52, 0x9a9f4a63, 0x9a9f4a63, 0x8d5d6f3, 0xc3c978e8, 0x8d5d6f3, 0xc3c978e8, 0xcd4f2531, 0x8d5d6f3, 0xc3c978e8, 0x9a9f4a63, 0x4c8214b, 0x8d5d6f3, 0x4c8214b, 0x46a636a4, 0x9a9f4a63, 0xcd4f2531, 0x23531b52, 0x9a9f4a63, 0xcd4f2531, 0xc3c978e8, 0x4c8214b, 0x8d5d6f3, 0xc3c978e8, 0x9a9f4a63, 0xa085b4c, 0xc3c978e8, 0xc3c978e8, 0x9a9f4a63, 0xcd4f2531, 0x4c8214b, 0x23531b52, 0xcd4f2531, 0x4c8214b, 0x8d5d6f3, 0xa085b4c, 0xc3c978e8, 0x46a636a4, 0x8d5d6f3, 0xc3c978e8, 0x9a9f4a63, 0xc3c978e8, 0xcd4f2531, 0x8d5d6f3, 0x4c8214b, 0x23531b52, 0x8d5d6f3, 0xcd4f2531, 0x9a9f4a63, 0x8d5d6f3, 0x4c8214b, 0x9a9f4a63, 0x8d5d6f3, 0x8d5d6f3, 0x46a636a4, 0x9a9f4a63, 0x46a636a4, 0xc3c978e8, 0xcd4f2531, 0xc3c978e8, 0x4c8214b, 0x23531b52, 0x8d5d6f3, 0x23531b52, 0x8d5d6f3, 0x8d5d6f3, 0xc3c978e8, 0x23531b52, 0x8d5d6f3, 0x9a9f4a63, 0x4c8214b, 0x8d5d6f3, 0x23531b52, 0x8d5d6f3, 0x9a9f4a63, 0x8d5d6f3, 0xc3c978e8, 0x8d5d6f3, 0x9a9f4a63, 0x9a9f4a63, 0x8d5d6f3, 0x4c8214b, 0x8d5d6f3, 0x4c8214b, 0x4c8214b, 0xc3c978e8, 0x8d5d6f3, 0x9a9f4a63, 0x9a9f4a63, 0x23531b52, 0x8d5d6f3, 0x9a9f4a63, 0x9a9f4a63, 0x23531b52, 0x8d5d6f3, 0xc3c978e8, 0x46a636a4, 0x4c8214b, 0x8d5d6f3, 0x46a636a4, 0xc3c978e8, 0x23531b52, 0x8d5d6f3, 0x23531b52, 0x23531b52, 0x9a9f4a63, 0x8d5d6f3, 0xc3c978e8, 0x9a9f4a63, 0xc3c978e8, 0x23531b52, 0xcd4f2531, 0x4c8214b, 0xcd4f2531, 0x9a9f4a63, 0x4c8214b, 0x4c8214b, 0x8d5d6f3, 0x4c8214b, 0xc3c978e8, 0xa085b4c, 0xc3c978e8]
correct = [0x22640aba57200, 0x8004479d42852, 0x880054948c092, 0x8a41420193a02, 0x400541d1e04050, 0x4821117a352810, 0x4a0044c8404a12, 0x4a245518302a90, 0x4a24557b20d892, 0x4a2650e3796050, 0x10a01442864e2d0, 0x108a505e86d6802, 0x108a50451e1c880, 0x108a505f3ec4010, 0x108a70169e13012, 0x108a7011af138d0, 0x108860412910010, 0x1422700d0b40812, 0x142865141e590c0, 0x142a44551dce092, 0x148a455682d2000, 0x14a2545a205aa92, 0x400a0550a055212, 0x402a1044bec02c2, 0x408250471c01280, 0x4088145fb0d1852, 0x408834010dc50c0, 0x4088211f1a83012, 0x50227401a7400c2, 0x50202007aa948c0, 0x500835170e80042, 0x44a071423453280, 0x448a30420e53000, 0x442a601ba382a52, 0x4422751ca9ddad0, 0x442045472a068c0, 0x442810491c9b012, 0x448245568915880, 0x44a2044c9fde000, 0x500054449210290, 0x502044461b93242, 0x548851463309a82, 0x54825446b34e012, 0x5482105ba4cb042, 0x548230008d5c852, 0x548230018dcf292, 0x548261528b93800, 0x54807559b9928d0, 0x542a4d162197a02, 0x54801913325ba90, 0x548848189197012, 0x54a8614b1acb202, 0x1002a31432d18890, 0x1008074499f8b090, 0x54a8304b2d578c0, 0x540a75590c45a40, 0x54023543b083ad0, 0x50826453af42010, 0x1048a00422488082, 0x10488015436c0082, 0x1048235023e1b840, 0x104822401abc48c2, 0x1048071423b4e252, 0x10480714f370e090, 0x104821d022adead2, 0x1048a5d190b072d0, 0x104a81d0d074a850, 0x1102219079e8f2d2, 0x110884c1bb8c0212, 0x1108a61051c988c2, 0x11020650f2100800, 0x104a824071b45812, 0x10420700d1893a50, 0x10402750f19df080, 0x100a8600d00128c0, 0x14088401fb31d250, 0x14082101fb75b802, 0x114aa544c324f200, 0x140000546a19e842, 0x14000515ba2972c2, 0x1400071099100a42, 0x114aa740731408c0, 0x114a82017160ea10, 0x1142230402f4c850, 0x11408705a135f240, 0x1140a654614c0a80, 0x1148830563bd5a52, 0x114a831519a56080, 0x14002355f03950d2, 0x14008091e8edd210, 0x1400a08032b172d2, 0x140821852bc00050, 0x144000c449118242, 0x1500001461ed8290, 0x144aa154b288c082, 0x144aa350001cd880, 0x144aa7016be07840, 0x1500231071e41ad2, 0x150026452beccad2, 0x144aa58039586a52, 0x150024c17a053a42, 0x150024c173551a12, 0x150a25150a45f2d0, 0x154005558b45c802, 0x15422005aa558842, 0x154880058b8dd252, 0x800001046854aac0, 0x80020004e175f2c2, 0x800280544931f000, 0x8008a054c3303a00, 0x80482541a1c5d2d2, 0x8048210038a542c0, 0x80480114aa697840, 0x8042a015b3917a52, 0x804283502048a0c0, 0x8040a310f8d91240, 0x8040a314221110d2, 0x8040a644ba291890, 0x80420615197c2892, 0x804aa254fbf8a8d0, 0x8102a20478a938d2, 0x810a031539f55250, 0x81420701f81d7ad0, 0x814226501230ba12, 0x814003412855cac0, 0x810801047a995250, 0x8100a105137dea90, 0x814aa454f1a5d840, 0x814aa21028c50252, 0x814a8351c16c80d0, 0x814a2711f25cd250, 0x814a8245a234bac2, 0x814a2715f195d090, 0x814a80c189f828c0, 0x840082549b2d7a50, 0x840203459138a0c0, 0x84088644d961aa00, 0x844087047b200a90, 0x8440a65453248a50, 0x8502a14533580092, 0x85020414d0e5aa40, 0x844aa1055bfca8c2, 0x8448a6009814ca52, 0x8448a60408a56ad0, 0x844a8314b864b210, 0x85020304b2293842, 0x850803143b6dd212, 0x850a0655a1a97092, 0x85088711dad17a12, 0x8502271050a0b880, 0x844aa30050451ac0, 0x8542a005195db8c0, 0x8542a310022c9892, 0x8542a310b9c8d850, 0x8548260401907080, 0x854883556288f010, 0x854a05d0088d1a12, 0x854a2180c3c91a52, 0x854a859409a96052, 0x9000219468cdc212, 0x90020584302cb252, 0x900800d5e0ac2090, 0x90402494e9a49ac0, 0x904201c5a829b802, 0x9040a245b2a40280, 0x900a0744d3e8b2c2, 0x900001c029517282, 0x854024d08325ca92,
           0x850a208121fc4810, 0x904a0515b26d8812, 0x904800459b3de810, 0x9040871022a1d0c0, 0x9042a251710d0812, 0x904206516838a290, 0x904222005115c050, 0x90482344a38930c0, 0x904a0715eae99a42, 0x910202059a1532d0, 0x9108065542fdf042, 0x910a2214a03c58d0, 0x910a221058b4f052, 0x910282503bbc9852, 0x904a82109b2412d2, 0x904a8455b9f8c2d2, 0x9100251598492a42, 0x91088414f0f52052, 0x91482545385998d2, 0x91482545710492c2, 0x91488250c36de0d2, 0x9148a7013ac000d2, 0x914887150b09f280, 0x9148871568412290, 0x914a231480d42240, 0x94002215299cfa52, 0x9400a30508a91ac2, 0x9408870528981050, 0x940a230589cc5212, 0x940a0445b0703092, 0x9440a405100dc292, 0x94428005b9fcc8d0, 0x944884559a6d0852, 0x944a2404f21142d2, 0x9500241472cd1840, 0x9508a410f32c7ac0, 0x950885558038c840, 0x95088554b3003202, 0x95088445da497ac2, 0x950887509075e850, 0x9508a301dbc11210, 0x9508a745e999f850, 0x9540260548056000, 0x9542a354cac4a892, 0x95488610faa94250, 0x954a0700985032c2, 0x9542860009d18292, 0x950aa4445b513ac2, 0x20a75423b48880, 0x20a640f855ba90, 0x22260042397850, 0x2a045473f45052, 0x2aa05552306240, 0x608310a93d4a02, 0x622351c0388850, 0x62a3105204ea92, 0x62a31039b98a40, 0x6a044572b89842, 0x6aa2410204d842, 0x12002114ae010c0, 0x12222117a910282, 0x1228315298c82d0, 0x12a24057b4d32d2, 0x16002014bb03090, 0x160020113c0b0c2, 0x12aa214e2d42082, 0x12aa214b134a812, 0x1602741da91f0d2, 0x16803552b74dac2, 0x16a86544b7c5292, 0x42883048301a280, 0x4282641b07d6212, 0x4288610033c4050, 0x4602150a944da42, 0x468805071794ad0, 0x46a24415acc12c0, 0x5200044e35d7a02, 0x5222504f1e19ad0, 0x52a2740e0bcd090, 0x5602751192d18d0, 0x56203517a69d002, 0x562265501008280, 0x52a8710415d8a90, 0x528835109159840, 0x5208641a8f070d2, 0x5202211eb05d8c2, 0x46a8300d1dd1a40, 0x4688255a3acd2c0, 0x462a6556a442852, 0x4222745a8250ad0, 0x420a3446bc4fa92, 0x460814123a1fa82, 0x46205416b91e010, 0x56aa1445a453012, 0x56aa210290c1ad0, 0x56a8700600dea92, 0x10200200704152c2, 0x10208255a09cb810, 0x102206544290c282, 0x102a865582498242, 0x10602711394ca802, 0x10602710b97190c2, 0x1060a21152d138c0, 0x10620645a3b8f052, 0x10680215a0a9ea10, 0x106a02448b0502c0, 0x106a875139187802, 0x106aa741a8892a82, 0x1120060089c18850, 0x11602455d2f84010, 0x1160875062d1fa82, 0x112aa600d9510a40, 0x112a2314c80c0a82, 0x11228241d9248a10, 0x11222601bad46a80, 0x1122260109b060c0, 0x1128a2404870f050, 0x11688500516daa10, 0x116a055429a87ad0, 0x116a25459248a882, 0x116a8405f2ac4ad0, 0x116aa701c8c402d0, 0x1420220153397a00, 0x142023140ab00a92, 0x14202314c1851842, 0x1420275443f1e0c0, 0x14208615eb14ea52, 0x142827054a9c98c2, 0x142a030542544280, 0x142aa65520e958c2, 0x14608710500132c2, 0x142aa651a2003252, 0x1428224002a5d0c2, 0x14202750ab94ca10, 0x1560a64548f04a00, 0x1560071439743a02, 0x1528264419ecf240, 0x15228715e3dc5810, 0x1520a3419294e0d2, 0x152223019a78a852, 0x1528861098889050, 0x152a234061a85292, 0x152a234009c57a00, 0x152824451064e0c0, 0x15200545b970f8c0, 0x15602500d3380042, 0x1560a55423398800, 0x1562a145eb6ca800, 0x15688405335c88d0, 0x156a0015f89c2890, 0x156823018b357092, 0x156226006a3d6040, 0x15680641cbf038d2, 0x156aa7111bf5b212, 0x8022865179fc2a92, 0x8022a31428a11ac0, 0x802082044ac42240, 0x156a2645eaccca10, 0x15688254b10d5a00, 0x1568871552381810, 0x1568859162609ac0, 0x156821801b78ca50, 0x156281d1706cf892, 0x156081c5218122c0, 0x156000d5abb11090, 0x152a24d582389002, 0x152a00c461119880]
savedregs = [[0]*8]*512

v9 = 335
v26 = [0]*4096

# tmp = []
# for k in correct_checksums:
#     for i in range(0xffffffff):
#         if hash(i) == k:
#             tmp.append(i)
#             print(":))")
#             break
# print(tmp)
tmp = []
hash_map = [4, 5, 6, 7, 5, 4, 6, 10, 5, 8, 6, 5, 4, 5, 6, 6, 6, 5, 6, 3, 6, 6, 8, 7, 7, 4, 6, 10, 6, 5, 9, 7, 6, 8, 5, 8, 4, 7, 3, 8, 5, 5, 6, 7, 7, 8, 4, 7, 9, 6, 9, 7, 7, 9, 8, 6, 8, 6, 5, 4, 6, 7, 10, 8, 4, 5, 7, 3, 6, 4, 6, 8, 5, 5, 8, 4, 5, 4, 4, 6, 5, 9, 8, 7, 8, 7, 8, 7, 5, 7, 6, 2, 7, 8, 5, 5, 4, 6, 6, 8, 9, 8, 8, 3, 6, 3, 5, 6, 4, 5, 7, 8, 9, 8, 9, 6, 7, 8, 7, 8, 6, 6, 9, 8, 7, 9, 7, 5, 7, 8, 6, 6, 10, 9, 7, 8, 6, 7, 5, 6, 6, 5, 8, 9, 8, 7, 8, 8, 8, 6, 5, 9, 8, 6, 8, 8, 7, 9, 11, 6, 9, 10, 8, 6, 8, 9, 5,
            8, 9, 7, 8, 10, 10, 8, 4, 8, 9, 6, 9, 7, 6, 6, 7, 8, 10, 6, 5, 6, 7, 5, 9, 9, 9, 6, 6, 4, 8, 6, 7, 7, 8, 8, 8, 7, 6, 6, 6, 8, 8, 9, 8, 6, 4, 5, 8, 8, 7, 6, 7, 6, 4, 7, 6, 8, 9, 7, 9, 10, 8, 4, 5, 8, 4, 6, 9, 7, 6, 8, 11, 6, 6, 8, 4, 9, 5, 4, 9, 7, 11, 6, 10, 7, 6, 8, 6, 4, 7, 9, 5, 7, 4, 8, 7, 9, 8, 7, 7, 10, 8, 10, 6, 4, 6, 9, 5, 7, 5, 7, 7, 6, 5, 7, 8, 9, 7, 5, 7, 8, 7, 6, 7, 8, 8, 7, 9, 7, 9, 9, 6, 7, 8, 8, 5, 7, 8, 8, 5, 7, 6, 10, 9, 7, 10, 6, 5, 7, 5, 5, 8, 7, 6, 8, 6, 5, 4, 9, 4, 8, 9, 9, 7, 9, 6, 11, 6]
# for i0 in range(0x80):
#     for i1 in range(0x80):
#         for i2 in range(0x80):
#             for i3 in range(0x80):
#                 for i4 in range(0x80):
#                     for i5 in range(0x80):
#                         for i6 in range(0x80):
#                             for i7 in range(0x80):
#                                 if (EncodeMorton_9x7bit(i0, i1, i2, i3, i4, i5, i6, i7, (i6 >> 6) & 2 | (i5 >> 5) & 4 | (i4 >> 4) & 8 | (i3 >> 3) & 0x10 | (i2 >> 2) & 0x20 | (i1 >> 1) & 0x40 | (i7 >> 7))) | (i0 >> 7) << 63 == correct[0]:
#                                     print(i0, i1, i2, i3, i4, i5, i6, i7)


# print(tmp)
# data = []
# pos = []
# v26 = [BitVec(f'x[{i}]', 64) for i in range(8*335)]
# for i in range(8 * 335):
#     solver.add(v26[i] <= 256)
# for i in range(len(correct)):

#     v22 = EncodeMorton_9x7bit(v26[i*8+0] & 0x7f, v26[i*8+1] & 0x7f, v26[i*8+2] & 0x7f, v26[i*8+3] & 0x7f, v26[i*8+4] & 0x7f, v26[i*8+5] & 0x7f, v26[i*8+6] & 0x7f, v26[i*8+7] & 0x7f, (
#         v26[i*8+6] >> 6) & 2 | (v26[i*8+5] >> 5) & 4 | (v26[i*8+4] >> 4) & 8 | (v26[i*8+3] >> 3) & 0x10 | (v26[i*8+2] >> 2) & 0x20 | (v26[i*8+1] >> 1) & 0x40 | (v26[i*8+7] >> 7))
#     v23 = v26[i*8+0] >> 7
#     v22 |= v23 << 63
#     solver.add(v22 == correct[i])

# if solver.check() == sat:
#     m = solver.model()
#     for i in range(len(m)):
#         # data.append(m[m[i]])
#         print(m[i])

v26 = [46, 0, 24, 6, 42, 22, 20, 6, 12, 9, 30, 8, 7, 4, 37, 8, 8, 5, 32, 8, 5, 10, 38, 9, 50, 5, 46, 2, 2, 0, 48, 10, 64, 8, 16, 12, 29, 14, 21, 0, 124, 8, 14, 12, 19, 8, 32, 6, 74, 1, 18, 8, 45, 2, 32, 8, 122, 8, 22, 4, 35, 8, 48, 9, 120, 9, 26, 14, 33, 10, 54, 13, 112, 4, 28, 12, 47, 18, 53, 6, 14, 0, 88, 4, 55, 2, 35, 9, 44, 5, 106, 12, 30, 10, 48, 10, 32, 8, 98, 12, 20, 6, 54, 11, 36, 12, 104, 12, 29, 14, 52, 12, 40, 1, 104, 14, 23, 28, 52, 2, 40, 8, 102, 6, 23, 28, 49, 7, 0, 8, 100, 0, 1, 20, 48, 14, 100, 9, 70, 12, 57, 20, 16, 0, 84, 0, 112, 14, 36, 28, 23, 3, 100, 13, 116, 8, 39, 14, 22, 9, 124, 4, 120, 12, 2, 8, 48, 10, 102, 1, 90, 0, 59, 8, 50, 15, 62, 1, 48, 2, 65, 10, 0, 14, 46, 5, 32, 12, 116, 4, 5, 13, 34, 8, 8, 10, 84, 4, 52, 9, 12, 13, 58, 10, 89, 8, 37, 14, 4, 12, 52, 2, 84, 22, 33, 1, 16, 13, 40, 14, 75, 28, 36, 0, 44, 9, 84, 4, 116, 16, 17, 5, 8, 12, 74, 12, 96, 22, 1, 7, 16, 13, 120, 12, 84, 28, 1, 0, 86, 0, 8, 2, 118, 16, 52, 15, 100, 0, 40, 6, 86, 20, 32, 10, 106, 13, 46, 4, 107, 24, 17, 4, 126, 4, 22, 10, 121, 30, 19, 7, 80, 8, 26, 12, 98, 6, 17, 13, 64, 13, 32, 2, 127, 4, 6, 10, 120, 0, 30, 10, 64, 14, 48, 11, 108, 4, 20, 12, 110, 6, 38, 10, 10, 0, 80, 12, 81, 0, 20, 11, 2, 5, 92, 14, 98, 4, 21, 10, 82, 1, 110, 14, 80, 0, 54, 13, 108, 1, 92, 12, 83, 2, 54, 12, 108, 13, 72, 2, 94, 8, 35, 12, 108, 1, 70, 0, 85, 22, 35, 2, 110, 13, 68, 2, 87, 22, 34, 1, 120, 4, 78, 6, 66, 28, 48, 10, 88, 12, 86, 0, 91, 28, 53, 15, 114, 5, 126, 26, 98, 10, 16, 6, 86, 8, 74, 22, 83, 8, 38, 7, 72, 5, 100, 18, 75, 10, 52, 2, 86, 13, 104, 6, 106, 20, 54, 8, 48, 8, 46, 0, 53, 20, 66, 15, 8, 12, 20, 6, 31, 20, 118, 9, 68, 8, 110, 2, 126, 22, 33, 15, 118, 8, 114, 2, 92, 30, 17, 8, 122, 12, 90, 2, 83, 16, 5, 13, 44, 8, 92, 4, 71, 28, 48, 12, 96, 5, 40, 0, 4, 0, 98, 13, 84, 5, 32, 12, 4, 8, 100, 13, 112, 0, 26, 6, 22, 20, 103, 6, 108, 13, 22, 4, 0, 22, 97, 5, 86, 1, 12, 4, 19, 22, 119, 12, 80, 8, 12, 12, 31, 18, 118, 13, 118, 5, 26, 20, 19, 6, 99, 7, 114, 8, 52, 22, 27, 14, 113, 1, 84, 8, 54, 28, 63, 0, 99, 0, 58, 13, 72, 30, 55, 6, 71, 1, 14, 13, 120, 16, 9, 12, 116, 4, 48, 13, 98, 8, 4, 20, 119, 3, 16, 8, 94, 8, 40, 16, 80, 4, 68, 9, 62, 14, 33, 22, 100, 0, 66, 12, 2, 10, 59, 20, 85, 2, 116, 12, 28, 10, 26, 22, 86, 3, 0, 8, 34, 8, 42, 16, 113, 3, 10, 8, 44, 14, 73, 10, 119, 6, 44, 9, 14, 14, 94, 8, 102, 6, 102, 0, 112, 14, 58, 2, 118, 12, 24, 5, 30, 8, 66, 2, 67, 14, 26, 13, 8, 6, 90, 10, 81, 15, 26, 9, 6, 0, 88, 16, 85, 0, 100, 8, 126, 8, 48, 16, 117, 5, 66, 8, 106, 12, 39, 26, 102, 0, 100, 0, 70, 4, 53, 22, 67, 12, 70, 0, 108, 6, 26, 26, 87, 10, 118, 4, 122, 8, 4, 16, 84, 9, 70, 5, 110, 14, 17, 30, 101, 14, 92, 8, 96, 4, 50, 30, 100, 11, 48, 13, 28, 14, 89, 26, 65, 11, 30, 4, 40, 30, 77, 14, 66, 2, 34, 9, 44, 22, 67, 6, 65, 7, 40, 0, 8, 16, 85, 12, 101, 12, 74, 1, 20, 24, 64, 0, 71, 10, 22, 4, 72, 12, 69, 4, 70, 11, 112, 13, 56, 0, 120, 6, 98, 13, 116, 4, 54, 2, 112, 18, 98, 1, 104, 0, 42, 14, 118, 30, 117, 4, 54, 9, 74, 14, 85, 20, 69, 1, 46, 5, 90, 4, 69, 30, 87, 13, 106, 13, 46, 16, 119, 2, 117, 0, 46, 9, 90, 26, 66, 8, 81, 6, 38, 9, 94, 26, 69, 8, 84, 6, 62, 0, 64, 2, 119, 10, 115, 15, 92, 1, 82, 0, 92, 10, 86, 14, 108, 1, 78, 0, 108, 8, 67, 14, 78, 5, 96, 2, 73, 14, 103, 14, 142, 0, 14, 8, 22, 0, 3, 9, 134, 1, 12, 14, 46, 2, 7, 11, 152, 0, 52, 14, 34, 2, 6, 10, 178, 0, 54, 14, 10, 0, 36, 12, 230, 1, 24, 2, 29, 14, 55, 3, 238, 8, 8, 4, 16, 6, 33, 3, 216, 4, 10, 6, 30, 2, 33, 14, 242, 9, 46, 2, 43, 14, 5, 14, 208, 4, 56, 0, 54, 16, 3, 1, 250, 12, 44, 10, 28, 20, 1, 2, 240, 1, 44, 2, 17, 16, 1, 15, 232, 12, 58, 6, 9, 16, 16, 15, 220, 13, 6, 4, 39, 24, 20, 9, 248, 12, 62, 12, 47, 20, 39, 13, 168, 13, 106, 14, 35, 20, 1, 11, 158, 8, 76, 6, 53, 30, 37, 10, 206, 12, 78, 10, 59, 26, 17, 3, 242, 9, 86, 6, 35, 16, 18, 4, 206, 0, 94, 0, 20, 26, 3, 3, 138, 12, 76, 10, 17, 6, 33, 14, 166, 12, 102, 4, 23, 10, 6, 15, 244, 8, 122, 14, 40, 6, 55, 10, 254, 1, 104, 0, 37, 20, 33, 2, 212, 4, 112, 12, 61, 24, 39, 1, 246, 12, 76, 10, 61, 26, 51, 4, 198, 1, 126, 6, 42, 24, 35, 13, 244, 8, 76, 10, 57, 30, 54, 11, 200, 4, 118, 20, 46, 12, 37, 1, 158, 12, 50, 6, 75, 18, 5, 14, 128, 12, 20, 4, 122, 24, 7, 9, 138, 8, 50, 12, 78, 16, 54, 10, 202, 8, 42, 12, 81, 16, 20, 13, 246, 8, 50, 12, 65, 16, 23, 12, 160, 13, 124, 0, 117, 8, 4, 13, 150, 8, 66, 12, 110, 4, 19, 10, 236, 13, 38, 12, 118, 12, 39, 13, 238, 9, 38, 0, 73, 18, 51, 0, 238, 0, 34, 4, 67, 22, 49, 11, 222, 8, 40, 6, 127, 16, 34, 8, 128, 13, 74, 6, 122, 16, 1, 14, 158, 13, 72, 6, 85, 18, 38, 14, 144, 5, 88, 6, 107, 30, 52, 11, 154, 9, 102, 10, 95, 30, 48, 6, 176, 8, 66, 14, 114, 20, 18, 1, 230, 8, 34, 10, 116, 16, 33, 3, 236, 12, 102, 2, 102, 8, 7, 11, 244, 5, 98, 6, 113, 16, 2, 5, 248, 12, 106, 2, 125, 22, 7, 0, 224, 0, 68, 2, 66, 22, 52, 9, 208, 4, 120, 10, 83, 30, 34, 12, 222, 5, 82, 18, 113, 4, 48, 2, 226, 5, 66, 26, 125, 4, 37, 6, 216, 5, 96, 20, 115, 6, 53, 10, 190, 5, 8, 24, 21, 6, 66, 10, 134, 13, 8, 22, 51, 0, 83, 8, 148, 4, 24, 28, 11, 12, 96, 9, 254, 0, 10, 30, 8, 4, 87, 9, 200, 5, 26, 22, 58, 8, 66, 10, 230, 8, 56, 4, 8, 28, 64, 13, 130, 13, 16, 14, 62, 20, 119, 13, 138, 1, 28, 18, 22, 2, 68, 3, 246, 1, 82, 20, 73, 2, 22, 7, 164, 4, 78, 20, 101, 14, 36, 0, 212, 13, 10,
       4, 61, 8, 114, 14, 204, 12, 22, 4, 11, 10, 102, 14, 208, 0, 40, 6, 16, 22, 83, 7, 244, 13, 58, 8, 33, 24, 68, 2, 218, 4, 28, 12, 35, 24, 82, 1, 228, 8, 4, 8, 33, 18, 71, 2, 224, 4, 24, 2, 26, 20, 101, 15, 218, 5, 10, 14, 60, 28, 115, 14, 142, 8, 68, 2, 43, 24, 65, 15, 148, 5, 84, 14, 6, 30, 115, 14, 180, 4, 78, 6, 41, 18, 97, 9, 188, 9, 68, 14, 35, 22, 99, 0, 156, 13, 126, 6, 33, 20, 71, 4, 222, 9, 32, 6, 41, 16, 101, 5, 218, 13, 60, 4, 45, 14, 119, 9, 186, 13, 66, 0, 30, 8, 81, 10, 148, 9, 108, 12, 15, 4, 113, 10, 232, 13, 94, 2, 21, 8, 115, 11, 230, 9, 88, 10, 16, 8, 119, 9, 212, 5, 112, 12, 15, 18, 103, 7, 232, 9, 104, 0, 21, 28, 113, 5, 218, 4, 96, 2, 18, 26, 118, 15, 218, 0, 104, 8, 23, 24, 112, 11, 246, 0, 68, 0, 62, 20, 97, 8, 190, 5, 14, 2, 67, 30, 71, 8, 170, 5, 34, 6, 80, 28, 65, 11, 136, 4, 44, 2, 81, 28, 113, 8, 174, 5, 0, 2, 125, 30, 100, 8, 128, 9, 28, 6, 111, 8, 112, 9, 230, 13, 32, 0, 65, 10, 82, 11, 204, 12, 46, 4, 109, 14, 71, 9, 220, 13, 50, 4, 77, 8, 113, 14, 226, 9, 12, 8, 105, 2, 113, 15, 180, 12, 74, 10, 68, 4, 81, 14, 182, 12, 106, 14, 74, 2, 117, 5, 144, 4, 118, 4, 88, 10, 115, 8, 146, 9, 120, 2, 90, 0, 116, 12, 138, 13, 114, 10, 78, 10, 113, 15, 148, 8, 118, 4, 95, 18, 115, 2, 170, 8, 96, 10, 93, 28, 100, 6, 168, 4, 126, 10, 91, 30, 119, 10, 236, 0, 64, 8, 66, 26, 80, 10, 252, 1, 114, 8, 127, 20, 66, 13, 218, 12, 104, 12, 73, 22, 113, 6, 202, 9, 68, 2, 126, 16, 113, 1, 202, 1, 100, 0, 101, 20, 86, 3, 170, 9, 118, 10, 102, 0, 117, 15, 52, 0, 190, 4, 16, 20, 22, 13, 46, 8, 190, 10, 15, 16, 18, 3, 32, 4, 134, 14, 35, 18, 17, 6, 20, 9, 156, 14, 37, 6, 53, 12, 50, 8, 180, 12, 34, 10, 33, 12, 94, 5, 174, 4, 24, 18, 4, 2, 112, 4, 150, 12, 57, 24, 3, 0, 118, 9, 162, 8, 51, 18, 2, 5, 122, 12, 174, 4, 48, 20, 7, 2, 64, 13, 158, 14, 32, 12, 51, 12, 100, 1, 178, 2, 32, 26, 35, 4, 24, 0, 192, 14, 4, 28, 1, 5, 58, 9, 204, 8, 32, 28, 0, 7, 30, 4, 232, 0, 49, 28, 7, 9, 46, 13, 200, 10, 39, 8, 53, 15, 72, 0, 196, 14, 3, 28, 4, 5, 64, 9, 192, 2, 6, 28, 7, 5, 52, 1, 236, 8, 46, 20, 32, 13, 52, 9, 238, 4, 43, 16, 38, 8, 104, 9, 212, 10, 27, 30, 19, 7, 94, 1, 222, 6, 20, 26, 39, 13, 94, 5, 244, 14, 37, 18, 52, 13, 2, 0, 160, 0, 90, 16, 38, 15, 38, 13, 156, 4, 79, 26, 48, 2, 20, 4, 164, 4, 65, 18, 53, 4, 126, 1, 154, 2, 92, 2, 7, 0, 82, 12, 190, 12, 69, 2, 37, 3, 110, 12, 144, 10, 100, 12, 49, 5, 6, 5, 222, 10, 78, 2, 4, 14, 34, 8, 202, 14, 125, 4, 23, 11, 36, 4, 220, 14, 121, 22, 50, 1, 124, 12, 210, 6, 81, 24, 21, 3, 88, 13, 216, 14, 116, 26, 2, 6, 114, 0, 208, 0, 96, 24, 22, 9, 22, 4, 230, 8, 117, 16, 54, 3, 28, 0, 246, 2, 80, 24, 39, 2, 8, 1, 252, 6, 79, 30, 17, 1, 60, 1, 202, 10, 72, 26, 7, 7, 70, 12, 166, 10, 124, 20, 37, 2, 86, 4, 184, 6, 72, 30, 39, 13, 124, 1, 186, 8, 103, 24, 17, 12, 46, 0, 154, 4, 121, 24, 17, 11, 46, 1, 186, 10, 87, 22, 6, 13, 66, 1, 186, 6, 82, 14, 6, 7, 72, 0, 156, 8, 115, 14, 22, 6, 108, 9, 240, 10, 119, 0, 32, 14, 126, 4, 234, 2, 97, 16, 37, 1, 70, 5, 234, 8, 115, 18, 50, 3, 2, 9, 136, 10, 4, 18, 65, 3, 20, 4, 190, 2, 11, 28, 66, 8, 18, 1, 148, 8, 32, 22, 82, 13, 18, 5, 176, 0, 44, 24, 115, 14, 124, 13, 138, 0, 22, 24, 86, 0, 120, 9, 140, 6, 28, 16, 87, 3, 112, 8, 166, 10, 6, 28, 65, 7, 64, 5, 156, 6, 43, 30, 87, 12, 82, 4, 138, 4, 11, 30, 98, 10, 78, 0, 144, 0, 40, 16, 101, 15, 88, 13, 190, 2, 50, 26, 116, 0, 106, 5, 186, 0, 58, 28, 112, 3, 8, 0, 194, 0, 13, 20, 87, 2, 112, 12, 212, 12, 13, 14, 80, 12, 82, 1, 254, 10, 22, 22, 82, 7, 42, 8, 230, 8, 44, 16, 117, 2, 62, 5, 194, 8, 56, 16, 96, 9, 14, 8, 242, 12, 41, 24, 70, 0, 46, 8, 206, 0, 46, 30, 80, 5, 40, 0, 196, 4, 34, 30, 85, 1, 40, 0, 244, 14, 7, 18, 99, 0, 70, 12, 226, 12, 23, 0, 118, 2, 90, 4, 218, 6, 51, 6, 117, 9, 96, 13, 210, 0, 62, 8, 114, 13, 70, 12, 234, 12, 41, 14, 113, 13, 110, 0, 224, 8, 61, 28, 113, 1, 34, 12, 134, 14, 66, 26, 68, 6, 58, 1, 134, 4, 81, 20, 64, 13, 52, 1, 130, 10, 88, 20, 69, 10, 48, 0, 148, 12, 86, 22, 87, 15, 30, 1, 174, 8, 75, 26, 87, 12, 44, 5, 134, 10, 80, 28, 115, 13, 6, 0, 132, 8, 116, 26, 96, 13, 48, 5, 186, 6, 100, 30, 113, 11, 82, 9, 160, 10, 82, 16, 81, 3, 50, 1, 184, 2, 107, 24, 113, 4, 36, 1, 144, 6, 64, 22, 99, 7, 62, 0, 158, 0, 89, 22, 86, 4, 106, 0, 246, 12, 68, 30, 80, 8, 94, 9, 206, 6, 86, 16, 84, 8, 46, 12, 208, 6, 70, 22, 119, 8, 20, 4, 238, 10, 125, 30, 84, 12, 36, 9, 244, 0, 91, 30, 67, 5, 40, 13, 198, 4, 127, 24, 67, 4, 24, 12, 224, 2, 73, 20, 115, 0, 34, 5, 216, 14, 113, 22, 100, 1, 46, 0, 210, 2, 118, 22, 100, 2, 36, 8, 208, 4, 70, 10, 115, 9, 8, 8, 222, 6, 94, 10, 87, 9, 96, 13, 196, 12, 88, 0, 85, 4, 112, 4, 254, 4, 80, 0, 86, 14, 108, 4, 250, 12, 126, 8, 70, 12, 68, 12, 238, 0, 69, 8, 119, 13, 92, 12, 206, 8, 107, 12, 96, 9, 108, 1, 196, 6, 91, 26, 100, 7, 108, 4, 204, 12, 98, 18, 81, 6, 72, 1, 214, 14, 79, 28, 117, 5, 126, 9, 228, 6, 119, 28, 118, 6, 158, 13, 190, 12, 39, 28, 20, 1, 186, 0, 170, 6, 48, 20, 1, 11, 142, 0, 160, 8, 6, 20, 1, 12, 110, 4, 218, 8, 109, 30, 114, 12, 86, 12, 250, 2, 72, 18, 100, 10, 80, 12, 230, 14, 81, 24, 112, 12, 82, 0, 234, 30, 84, 8, 115, 5, 106, 12, 198, 20, 85, 2, 103, 4, 84, 13, 250, 30, 119, 10, 66, 1, 66, 0, 248, 16, 82, 12, 69, 11, 88, 0, 220, 22, 73, 12, 68, 15, 48, 5, 212, 22, 104, 8, 114, 12, 0, 0, 222, 26, 96, 0, 102, 11]
# print(hex(Unpad64Bit_8Bit(0x01004557E33CE6F0)))
# for i in range(0xffffffffffffffff, 0, -1):
#     # if (Unpad64Bit_8Bit(i) == 46):
#     #     print(i)
#     print(Unpad64Bit_8Bit(i))
# v26 = [46, 0, 24, 6, 42, 22, 20, 6]

# print(hex(EncodeMorton_48bit(0x42fe5a, 0x75b)))

v25 = [BitVec(f'x[{i}]', 64) for i in range(335)]
# v25 = BitVec(f'x[{0}]', 64)
# print(Unpad64Bit_8Bit(19121562040576))
# print(Unpad64Bit_8Bit(19121562040576 >> 1))
# print(Unpad64Bit_8Bit(19121562040576 >> 2))
# print(Unpad64Bit_8Bit(19121562040576 >> 3))
# print(Unpad64Bit_8Bit(19121562040576 >> 4))
# print(Unpad64Bit_8Bit(19121562040576 >> 5))
# print(Unpad64Bit_8Bit(19121562040576 >> 6))
# print(Unpad64Bit_8Bit(19121562040576 >> 7))

for i in range(335):
    v26[i*8+1], v26[i*8+5] = v26[i*8+5], v26[i*8+1]
# print(v26)
for i in range(335):
    # v19 = x[i] >> 8
    # v6 = (16 * x[i]) & 0xFF0 | (y[i] >> 28)
    # v7 = (y[i] >> 16) & 0xFFF
    # v8 = EncodeMorton_12bit((y[i] & 0xffff) >> 10, (y[i] >> 4) & 0x3F)
    # v20 = EncodeMorton_24bit(v8, v7)
    # v24 = EncodeMorton_48bit(v19, v7)
    # v25 = (v24 << 12) | v6
    solver.add(v26[8 * i] == (Unpad64Bit_8Bit(v25[i]) & 0xff))
    solver.add(v26[8 * i + 1] == (Unpad64Bit_8Bit(v25[i] >> 1) & 0xff))
    solver.add(v26[8 * i + 2] == (Unpad64Bit_8Bit(v25[i] >> 2) & 0xff))
    solver.add(v26[8 * i + 3] == (Unpad64Bit_8Bit(v25[i] >> 3) & 0xff))
    solver.add(v26[8 * i + 4] == (Unpad64Bit_8Bit(v25[i] >> 4) & 0xff))
    solver.add(v26[8 * i + 5] == (Unpad64Bit_8Bit(v25[i] >> 5) & 0xff))
    solver.add(v26[8 * i + 6] == (Unpad64Bit_8Bit(v25[i] >> 6) & 0xff))
    solver.add(v26[8 * i + 7] == (Unpad64Bit_8Bit(v25[i] >> 7) & 0xff))

if solver.check() == sat:
    model = solver.model()
    print("Solution found:")
    # print(model)
    for i in range(335):
        print(model[v25[i]].as_long(), end=', ')
else:
    print("No solution found")

# 46 0 24 6 42 22 20 6

# for k in range(335):
#     v10 = x[k]
#     v11 = y[k]
#     # v10 = 1234
#     # v11 = 4321

#     solver.add(v10 <= 0xFFFFFFFF)
#     solver.add(v11 <= 0xFFFFFFF)

#     v19 = v10 >> 8
#     v6 = ((v10 << 4) & 0xff0 | (v11 >> 28)) & 0xffff
#     v7 = (v11 >> 16) & 0xfff

#     # print(hex(v6), " ", hex(v7))

#     v8 = EncodeMorton_12bit((v11 & 0xffff) >> 10, (v11 >> 4) & 0x3F)
#     v20 = EncodeMorton_24bit(v8, v7)
#     v24 = EncodeMorton_48bit(v19, v7)
#     v25 = (v24 << 12) | v6
#     # print(hex(v8), hex(v20), hex(v24), hex(v25))
#     v26[i*8+0] = Unpad64Bit_8Bit(v25) & 0xff
#     v26[i*8+1] = Unpad64Bit_8Bit(v25 >> 1) & 0xff
#     v26[i*8+2] = Unpad64Bit_8Bit(v25 >> 2) & 0xff
#     v26[i*8+3] = Unpad64Bit_8Bit(v25 >> 3) & 0xff
#     v26[i*8+4] = Unpad64Bit_8Bit(v25 >> 4) & 0xff
#     v26[i*8+5] = Unpad64Bit_8Bit(v25 >> 5) & 0xff
#     v26[i*8+6] = Unpad64Bit_8Bit(v25 >> 6) & 0xff
#     v26[i*8+7] = Unpad64Bit_8Bit(v25 >> 7) & 0xff

#     v5 = v26[i*8+1]
#     v26[i*8+1] = v26[i*8+5]
#     v26[i*8+5] = v5
#     v21 = numberOfSetBits(((((v26[i*8+4] << 8) | v26[i*8+5]) ^ ((v26[i*8+2] << 8) | v26[i*8+3]) ^ (
#         v26[i*8+1] | (v26[i*8+8 * k] << 8)) ^ ((v26[i*8+6] << 8) | v26[i*8+7])) & 0xffff))
#     # print(hex(v21))
#     v3 = correct_checksums[k]

#     solver.add((hash(v21) & 0xffffffff) == v3)

# if solver.check() == sat:
#     model = solver.model()
#     print("Solution found:")
#     print(model)

# else:
#     print("No solution found")

# print(512*8)
# for i in range(0xffffffff):
#     for j in range(0xFFFFFFF):
#         x = 0

# print(len(correct))
# print(len(correct_checksums))

# 00001111 11111111 11111111 11111111

# for i in range(0, len(a), 8):
#     cnt = 7
#     tmp = 0
#     while (cnt != -1):
#         tmp <<= 8
#         tmp += a[i+cnt]
#         cnt -= 1
#     correct.append(tmp)
# for i in correct:
#     print(hex(i), end=", ")
