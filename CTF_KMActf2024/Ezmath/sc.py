# print(hex(len("KMACTF{123412341234}")))
# print(chr(0x000000000000004B))
# print(400/21)
from z3 import *
const = ['`rIbjErMdhlhGM`ddphCnKbCEIEbMIbn', 'KnGj`KCnphGffMhGrCMlGb`pphMhfdEb',
         'bEprb`IdrhjldpIbnnddEChbndMKlIGp', 'bEKKKKppbdnEEMCMMEKIKCblbIpdjdf`', 'GEbGC``pddhlnjCnbjpE`KKfMIfKK`pG']
const = ["1", "4672617564756c656e74", "446563656974",
         "747269636b3267", "6c6d616f69646b7768617469736974"]
pos = [0x0, 0x27, 0x0A, 0x18, 0x15, 0x8, 0x1E, 0x26, 0x0F, 0x5, 0x8, 0x0F, 0x0A, 0x18, 0x7, 0x10, 0x14, 0x11, 0x8, 0x5, 0x18, 0x1, 0x1D, 0x0F, 0x9, 0x19, 0x28, 0x16, 0x26, 0x2, 0x5, 0x1B, 0x0E, 0x12, 0x26, 0x26, 0x11, 0x6, 0x20, 0x4, 0x1A, 0x17, 0x2, 0x0C, 0x11, 0x1, 0x14, 0x0C, 0x25, 0x1A, 0x25, 0x1C, 0x3, 0x0E, 0x4, 0x21, 0x0C, 0x18, 0x9, 0x24, 0x17, 0x1A, 0x20, 0x3, 0x27, 0x8, 0x0E, 0x11, 0x18, 0x4, 0x18, 0x11, 0x1E, 0x4, 0x10, 0x5, 0x0C, 0x0D, 0x0D, 0x8, 0x3, 0x0F, 0x0E, 0x17, 0x4, 0x17, 0x1E, 0x7, 0x1C, 0x15, 0x23, 0x0, 0x0D, 0x1E, 0x11, 0x11, 0x25, 0x27, 0x0A, 0x20, 0x10, 0x21, 0x21, 0x0C, 0x0, 0x5, 0x1A, 0x18, 0x3, 0x1C, 0x0C, 0x21, 0x1D, 0x28, 0x11, 0x10, 0x1C, 0x28, 0x6, 0x0, 0x20, 0x22, 0x15, 0x1D, 0x26, 0x9, 0x6, 0x0, 0x23, 0x6, 0x1D, 0x2, 0x1, 0x2, 0x28, 0x9, 0x1A, 0x0, 0x10, 0x16, 0x8, 0x0C, 0x1C, 0x1, 0x1A, 0x27, 0x2, 0x7, 0x3, 0x19, 0x27, 0x1B, 0x15, 0x11, 0x1F, 0x0C, 0x26, 0x7, 0x16, 0x1A, 0x5, 0x3, 0x24, 0x17, 0x28, 0x6, 0x7, 0x20, 0x8, 0x0D, 0x12, 0x10, 0x21, 0x11, 0x0C, 0x15, 0x23, 0x1A, 0x0A, 0x21, 0x13, 0x0C, 0x11, 0x9, 0x1B, 0x13, 0x0B, 0x1E, 0x15, 0x9, 0x2, 0x1F, 0x0D, 0x3, 0x15, 0x1C, 0x25, 0x28, 0x16, 0x4,
       0x17, 0x26, 0x2, 0x15, 0x12, 0x1E, 0x7, 0x0A, 0x1D, 0x9, 0x0A, 0x0A, 0x15, 0x1E, 0x0A, 0x4, 0x2, 0x0E, 0x1E, 0x4, 0x1D, 0x1B, 0x15, 0x18, 0x20, 0x21, 0x1B, 0x0B, 0x0D, 0x1C, 0x3, 0x0B, 0x19, 0x13, 0x9, 0x15, 0x0A, 0x1D, 0x1F, 0x0C, 0x10, 0x20, 0x1D, 0x27, 0x26, 0x28, 0x12, 0x1F, 0x27, 0x1, 0x23, 0x0, 0x0C, 0x25, 0x0, 0x5, 0x2, 0x1, 0x1D, 0x0D, 0x26, 0x25, 0x15, 0x17, 0x16, 0x8, 0x5, 0x24, 0x4, 0x15, 0x16, 0x26, 0x24, 0x0D, 0x11, 0x5, 0x1D, 0x1, 0x9, 0x19, 0x16, 0x17, 0x7, 0x0B, 0x16, 0x3, 0x1B, 0x0E, 0x12, 0x27, 0x5, 0x25, 0x21, 0x1D, 0x0E, 0x1D, 0x0A, 0x1E, 0x25, 0x28, 0x1D, 0x13, 0x1F, 0x25, 0x14, 0x12, 0x0E, 0x18, 0x19, 0x25, 0x4, 0x11, 0x1E, 0x4, 0x27, 0x0F, 0x28, 0x5, 0x22, 0x19, 0x9, 0x28, 0x28, 0x0D, 0x9, 0x3, 0x15, 0x24, 0x9, 0x0C, 0x5, 0x0A, 0x16, 0x14, 0x6, 0x4, 0x10, 0x27, 0x22, 0x1D, 0x14, 0x12, 0x13, 0x5, 0x17, 0x16, 0x9, 0x24, 0x1E, 0x1E, 0x6, 0x25, 0x0, 0x2, 0x0F, 0x0F, 0x0A, 0x11, 0x6, 0x24, 0x2, 0x22, 0x0B, 0x2, 0x27, 0x0B, 0x1C, 0x16, 0x25, 0x1E, 0x13, 0x18, 0x5, 0x0E, 0x1B, 0x0D, 0x0C, 0x4, 0x12, 0x28, 0x25, 0x5, 0x0F, 0x1C, 0x4, 0x0F, 0x0B, 0x19, 0x8, 0x23, 0x20, 0x0C, 0x1, 0x12, 0x6, 0x7, 0x8, 0x28, 0x23, 0x13]
#  0x183060, 0x1CB972,  0x3264C9
# 63 61 5F 62
v20 = [3236549, 3203523, 3632861, 3137471, 3302601, 3203523, 3137471, 3236549, 3467731, 3137471,
       3566809, 3864043, 3203523, 1089858, 1089858, 1089858, 1089858, 1089858, 1089858, 1089858]
v21 = [2741159, 2807211, 3698913, 3335627, 3764965, 3137471, 3335627, 1717352, 3797991, 3996147,
       3137471, 2543003, 3302601, 1750378, 3137471, 2212743, 2708133, 1717352, 2212743, 2476951]
v22 = [1816430, 1717352, 1783404, 3368653, 1618274, 1750378, 1684326, 1816430, 1684326, 3203523, 1651300, 1816430, 1750378, 3335627, 1684326, 1717352, 1684326, 1684326, 1585248, 1618274, 1585248, 3335627, 1684326, 1750378, 1651300, 3203523, 3236549, 3335627, 3236549, 3368653, 1849456, 1816430, 1717352, 1585248, 3368653, 1717352, 1816430, 1651300, 1684326, 1585248, 3368653, 1750378, 3203523, 3302601, 1651300, 1651300, 1717352, 1849456, 1882482, 1816430, 1816430, 1783404, 1717352, 3203523, 1684326, 3368653, 1882482, 1816430, 3203523, 3368653, 1849456, 1585248, 1750378, 1816430, 3236549, 1783404, 3236549, 3236549, 1585248, 3236549, 3335627, 1750378, 3269575, 1684326, 1684326, 1717352, 1783404, 1783404, 1882482, 3368653,
       3236549, 3269575, 1717352, 3236549, 1750378, 1717352, 1849456, 3335627, 3236549, 3236549, 1816430, 3236549, 3203523, 1684326, 3335627, 1651300, 1783404, 1717352, 1618274, 3368653, 3203523, 1750378, 3335627, 1717352, 1750378, 3236549, 3302601, 1882482, 1750378, 1684326, 3269575, 1816430, 1684326, 1684326, 1585248, 1816430, 1882482, 1585248, 1651300, 3368653, 1783404, 1783404, 3302601, 3302601, 1618274, 1783404, 1816430, 1684326, 1882482, 1849456, 3203523, 3236549, 3335627, 1684326, 3203523, 1651300, 1849456, 1684326, 1849456, 1684326, 1750378, 1585248, 1618274, 3368653, 1717352, 3236549, 3368653, 3302601, 1651300, 3302601, 1882482, 1585248, 1816430, 1816430, 1849456, 1651300, 1585248, 3368653, 1618274, 1618274]
v23 = [1585248, 1882482, 3302601, 1618274, 1750378, 3236549, 1882482, 3368653, 1651300, 1717352, 1783404, 1717352, 3269575, 3368653, 1585248, 1651300, 1651300, 1849456, 1717352, 3203523, 1816430, 3335627, 1618274, 3203523, 3236549, 3302601, 3236549, 1618274, 3368653, 3302601, 1618274, 1816430, 3335627, 1816430, 3269575, 1750378, 1585248, 3335627, 3203523, 1816430, 1849456, 1717352, 3269575, 1684326, 1684326, 3368653, 1717352, 3269575, 1882482, 3203523, 3368653, 1783404, 3269575, 1618274, 1585248, 1849456, 1849456, 1717352, 3368653, 1717352, 1684326, 1651300, 3236549, 1618274, 1618274, 3236549, 1849456, 1882482, 1618274, 1585248, 3302601, 1651300, 1882482, 1717352, 1750378, 1783404, 1651300, 1849456, 3302601, 1618274,
       1816430, 1816430, 1651300, 1651300, 3236549, 3203523, 1717352, 1618274, 1816430, 1651300, 3368653, 3335627, 1783404, 3302601, 3269575, 1849456, 1618274, 3236549, 3335627, 3335627, 3335627, 3335627, 1849456, 1849456, 1618274, 1651300, 1816430, 3236549, 3236549, 3368653, 3203523, 3368653, 3368653, 3236549, 3335627, 3302601, 3335627, 3203523, 1618274, 1783404, 1618274, 3302601, 1849456, 1651300, 1750378, 1651300, 1684326, 1585248, 3269575, 3236549, 1618274, 3269575, 3203523, 1585248, 1585248, 1849456, 1651300, 1651300, 1717352, 1783404, 1816430, 1750378, 3203523, 1816430, 1618274, 1750378, 1849456, 3236549, 1585248, 3335627, 3335627, 1684326, 3368653, 3302601, 1684326, 3335627, 3335627, 1585248, 1849456, 3269575]
# a = 'ban_da_bi_lta!      '
# print(len(a))
# print(len("E*******************************"))
# Input = 'b'*20
# dic = {}
ans = 'SUper_e4sy_Md5_CR4CK'
print(len(ans))
Input = 'aaa0aa0aa0akaaaaaaaa'
flag_comp = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=<>,./{[]\|~:;?"\''
v9 = 0
enc = []
v31 = [0]*50
cnt = 0
while v9 < 400:
    # if (ans[cnt] == 'S'):

    # print(v9//21)
    # if (v9 == 21*4):
    for i in flag_comp:
        a = (127*v21[pos[v9]]) & 0xffffffff
        b = ((ord(i)+a) & 0xffffffff) >> 22
        if (b == ord(ans[cnt])):
            print(chr(b), end='')
            enc.append(i)
            break
    cnt += 1
    # print(b)
    #     print(chr(b), end='')
    # print()
    # v17 = (127*v21[pos[v9]]) & 0xffffffff
    # p = pos[v9]
    # v31.append((ord(Input[pos[v9]])+v17) >> 22)
    # print((v16), v20[pos[v9]])
    v9 += 21
# print(v31)
# print(enc)
print()
for i in enc:
    print(i, end='')
# for i in v31:
#     print(chr(i), end='')
v22 = v23
lua = [0x62, 0x61, 0x6E, 0x5E, 0x64, 0x61, 0x5E, 0x62, 0x69, 0x5E,
       0x6C, 0x75, 0x61, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
       ]
enc = []
# print(len(lua))
for j in range(20):
    for i in flag_comp:
        v17 = (127*v21[j]) & 0xffffffff
        v31[j] = (ord(i)+v17) >> 22
        if (v31[j] == lua[j]):
            enc.append(ord(i))
            # print(i)
            # break
# for i in v31:
#     print(chr(i), end='')
# # print(enc)
for i in enc:
    print(chr(i), end='')
# print(v22)
# 30CE23EDh, 0F8F47FC7h, 3CA6C488h, 0C08D9281h
# ed23ce30c77ff4f888c4a63c81928dc0
# lua = [0x62, 0x61, 0x6E, 0x5E, 0x64, 0x61, 0x5E, 0x62, 0x69, 0x5E,
#        0x6C, 0x75, 0x61, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
#        ]
# solver = Solver()
# Input = [BitVec(f'x[{i}]', 8) for i in range(335)]
# # Input = 'E*******************************'
# v9 = 0
# v31 = []
# while v9 < 400:
#     v17 = (127*v20[pos[v9]]) & 0xffffffff
#     p = pos[v9]
#     solver.add((((Input[pos[v9]])+v17) >> 22) == lua[pos[v9]])
#     # print((v16), v20[pos[v9]])
#     v9 += 21
# # print(v31)
# for i in v31:
#     print(chr(i), end='')
# v22 = v23

# if solver.check() == sat:
#     model = solver.model()
#     print("Solution found:")
#     print(model)
# else:
#     print("No solution found")
# 96bc90523a126cbeee8f704358cf0ff8
