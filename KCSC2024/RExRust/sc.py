# Mở tập tin để đọc(đảm bảo tập tin tồn tại)
# with open('E:\\CTF\\KCSC\\CTFs\\KCSC2024\\RExRust\\root_flag.enc', 'rb') as file:
#     # Đọc toàn bộ nội dung của tập tin
#     data = file.read()
#     # In ra nội dung đã đọc
#     print(data)
# enc = []
# for i in data:
#     enc.append(i)
# print(enc)

# str = [68, 114, 184, 134, 66, 134, 170, 161, 128, 41, 65, 213, 228, 126, 61, 50, 148, 226, 153, 45, 54, 195, 15, 72, 222,
#        195, 40, 21, 214, 206, 11, 122, 20, 118, 242, 111, 190, 176, 134, 13, 126, 255, 142, 69, 62, 154, 206, 74, 237, 105]
# str = [0xAE, 0x20, 0x55, 0xEC, 0x87, 0x08, 0x74, 0xF3, 0xF9, 0x02,
#        0x12, 0xF9, 0xE2, 0x00, 0x1C, 0x89, 0x28, 0xB4, 0xD7, 0xB6,
#        0x2A, 0x4B, 0xEE, 0x74, 0x2A, 0xEB, 0xEE, 0x05, 0x45, 0x26]
flag_format = "KCSC{"


def phase1(str):
    return str[::-1]


def phase2(str):
    for i in range(0, len(str)-1, 2):
        # print(i)
        j = i+1
        v1 = (str[i] & 0xf) | (str[j] & 0xf0)
        str[i] = (str[j] & 0xf) | (str[i] & 0xf0)
        str[j] = v1
    return str


def phase3(str):
    for i in range(0, len(str)-2):
        v5 = str[i]
        v6 = str[i+2]
        str[i] = (v5-v6) & 0xff
        str[i+2] = (v6-str[i]) & 0xff
    return str


def rev_phase3(str):
    for i in range(len(str)-1, 1, -1):
        v5 = str[i-2]
        v6 = str[i]
        str[i] = (v5+v6) & 0xff
        str[i-2] = (v5+str[i]) & 0xff
    return str


def phase4(str, num):
    a = ((num >> 8) & 0xff) ^ ((num >> 16) & 0xff) ^ (
        (num >> 24) & 0xff) ^ (num & 0xff)
    for i in range(len(str)):
        str[i] ^= a
    return str


def rev_phase4(str, num):
    # a = ((num >> 8) & 0xff) ^ ((num >> 16) & 0xff) ^ (
    #     (num >> 24) & 0xff) ^ (num & 0xff)
    # print(hex(num))
    for i in range(len(str)):
        str[i] ^= num
    return str


# print(hex(0x8F ^ 0x31 ^ 0x27 ^ 0xAD))

# enc = ""
# str = [0x4b, 0x43, 0x53, 0x43, 0x7b, 0x32, 0x33, 0x31, 0x34, 0x32,
#        0x33, 0x34, 0x77, 0x71, 0x65, 0x72, 0x61, 0x73, 0x64, 0x66,
#        0x61, 0x73, 0x64, 0x66, 0x78, 0x7a, 0x63, 0x76, 0x7d, 0xa]
# str = [0xAE, 0x20, 0x55, 0xEC, 0x87, 0x08, 0x74, 0xF3, 0xF9, 0x02,
#        0x12, 0xF9, 0xE2, 0x00, 0x1C, 0x89, 0x28, 0xB4, 0xD7, 0xB6,
#        0x2A, 0x4B, 0xEE, 0x74, 0x2A, 0xEB, 0xEE, 0x05, 0x45, 0x26]
# tmp = phase1(phase2(rev_phase3(rev_phase4(str, 0x8F3127AD))))
# for i in tmp:
#     print(chr(i))
#     enc += chr(i)
# if enc.find(flag_format) != -1:
#     print(":))))")
# print(enc)

# str = "KCSC{2314234wqerasdfasdfxzcv}\n"
# for i in str:
#     print(hex(ord(i)), end=", ")

for i in range(0, 0xff):

    str = [68, 114, 184, 134, 66, 134, 170, 161, 128, 41, 65, 213, 228, 126, 61, 50, 148, 226, 153, 45, 54, 195, 15, 72, 222,
           195, 40, 21, 214, 206, 11, 122, 20, 118, 242, 111, 190, 176, 134, 13, 126, 255, 142, 69, 62, 154, 206, 74, 237, 105]

    # str = [0xAE, 0x20, 0x55, 0xEC, 0x87, 0x08, 0x74, 0xF3, 0xF9, 0x02,
    #        0x12, 0xF9, 0xE2, 0x00, 0x1C, 0x89, 0x28, 0xB4, 0xD7, 0xB6,
    #        0x2A, 0x4B, 0xEE, 0x74, 0x2A, 0xEB, 0xEE, 0x05, 0x45, 0x26]
    # print(i)
    enc = ""
    tmp = phase1(phase2(rev_phase3(rev_phase4(str, i))))
    for i in tmp:
        enc += chr(i)
    print(enc)
    # if enc.find(flag_format) != -1:
    #     print(enc)
# break

# str = phase3(phase2(phase1(str)))

# str = phase1(phase2(rev_phase3(str)))

# for i in str:
#     print(chr(i), end=", ")

# print(str)

# print(str)
# str = (phase2(str))
# print(str)

# print(chr(i), end=", ")

# phase2(str)
# print(0x1e)
# print(phase1(phase2(phase3(phase4(str)))))
# print(hex((0x0d-0x73) & 0xff))
# print(hex((0x73-((0x0d-0x73) & 0xff)) & 0xff))

# x0 = 0xd9
# y0 = 120

# x = (x0-y0) & 0xff
# y = (y0-x) & 0xff

# print(hex(x))
# print(hex(y))

# print(hex((x+y) & 0xff))
# print(hex((x+((x+y) & 0xff)) & 0xff))

# aZsfxzdfqcdfqcu db 9Ah,'zsfxzdfqcdfqcubwq344231;rCSKC',0
# 2452083452
#  0xE1, 0x03, 0x22, 0x01
# print(hex(0x9a ^ 0xe1 ^ 0x03 ^ 0x22 ^ 0x01))
# print(hex(0xe1 ^ 0x03 ^ 0x22 ^ 0x01))
# print(hex(0x9a ^ 0xc1))
# a = 0xe1032201
# print(hex((a >> 8) & 0xff))
# print(hex((a >> 16) & 0xff))
# print(hex((a >> 24) & 0xff))
# print(hex(a & 0xff))
# print(0x6d ^ 0xD3 ^ 0x53 ^ 0x2D ^ 0x5A)
# 2905026959
# 0x8F3127AD

# print(hex(0x9a ^ 0x8f ^ 0x31 ^ 0x27 ^ 0xad))


# unsigned char ida_chars[] =
# {
#   0x1B, 0x0B, 0x3A, 0xA7, 0x5D, 0x11, 0x15, 0xD0, 0x2F, 0x43,
#   0x86, 0xE6, 0x5A, 0xFD, 0x96, 0xE8, 0xDE, 0x28, 0x1B, 0xAF,
#   0x0B, 0x6C, 0x14, 0x73, 0x07, 0xAF, 0x07, 0x3D, 0x1C, 0x81,
#   0xDB, 0xF8, 0x22, 0x66, 0x75, 0xA7, 0xBB, 0x6A, 0x4C, 0x5F,
#   0x1D, 0x8A, 0x57, 0xB7, 0xAE, 0x46, 0xB6, 0xDE, 0x48, 0x7C,
#   0xE0, 0xED, 0x63, 0x33, 0x54, 0xDE, 0xFB, 0x4C, 0x60, 0x92,
#   0x6A, 0xAA, 0xD0, 0x76, 0xC4, 0x35, 0x36, 0x0C, 0x44, 0xBA,
#   0x15, 0x04, 0xE4, 0x92, 0xB1, 0xCB, 0xD8, 0x4C, 0x60, 0xC7,
#   0xBA, 0x00, 0xFD, 0xCC, 0xF0, 0xA5, 0xD1, 0x1D, 0xF0, 0x01,
#   0xA2, 0x79, 0x44, 0xD0, 0xE8, 0xFA, 0xA9, 0x43, 0xB8, 0x78,
#   0x04, 0xF0, 0x29, 0x7E, 0x41, 0x37, 0x2C, 0x09, 0xE3, 0x87,
#   0xA1, 0x3D, 0xA0, 0x67, 0x65, 0x62, 0x4C, 0x28, 0x84, 0xFF,
#   0x8F, 0x42, 0x13, 0xC4, 0x32, 0x56, 0xE5, 0x87, 0x8A, 0xF3,
#   0x20, 0xB0, 0x15, 0x26, 0xF0, 0x32, 0x75, 0x49, 0x2E, 0xD5,
#   0x00, 0x04, 0x71, 0xEF, 0x30, 0xAD, 0x4C, 0x6D, 0x30, 0x4E,
#   0xF3, 0x38, 0xB0, 0x04, 0x5F, 0x22, 0xAD, 0x64, 0x0B, 0xF8,
#   0x6E, 0x4A, 0x3D, 0xF3, 0x83, 0xD4, 0x4E, 0xD7, 0x9B, 0xF2,
#   0x6C, 0x88, 0x53, 0x5F, 0xBF, 0x39, 0xCA, 0x9F, 0x0D, 0xF9,
#   0x5F, 0xA0, 0x05, 0xF6, 0x95, 0x37, 0x0D, 0x49, 0x80, 0x2F,
#   0x10, 0x8E, 0x1A, 0x09, 0x8F, 0x04, 0x25, 0xDB, 0xFA, 0x07,
#   0xF0, 0xA8, 0xC6, 0x54, 0x0F, 0xE8, 0x1C, 0xD6, 0x05, 0xE2,
#   0x4F, 0xFE, 0x8E, 0x38, 0xD1, 0x02, 0x96, 0x2D, 0x08, 0x94,
#   0x3E, 0x35, 0x5B, 0x59, 0x7D, 0xCB, 0xDF, 0x19, 0xFD, 0xBB,
#   0xD6, 0xE9, 0x87, 0x90, 0xDB, 0x6D, 0x72, 0xBE, 0xF9, 0xF2,
#   0x8F, 0x51, 0x0F, 0x30, 0x10, 0x7A, 0x06, 0x8F, 0xA8, 0x19,
#   0x5B, 0x35, 0x52, 0xE1, 0x14, 0x28, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x80, 0xDB, 0x73, 0x91, 0xFD, 0x7F,
#   0x00, 0x00, 0xF3, 0x36, 0x0A, 0x2B, 0xEB, 0xB5, 0xA6, 0xCF,
#   0x21, 0x44, 0xA1, 0xDE, 0x2E, 0x35, 0xF3, 0xD5, 0x3F, 0x0D,
#   0xF9, 0xD2, 0x29, 0x99, 0xC2, 0xE6, 0x64, 0x5B, 0x19, 0xA7,
#   0xBF, 0xA0, 0x17, 0xE0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x50, 0xDC, 0x73, 0x91, 0xFD, 0x7F,
#   0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0xC1, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#   0x00, 0x00, 0x00
# };


# 0A73A0B1Bh
