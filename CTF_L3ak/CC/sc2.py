_sbox = [0xAA, 0x9B, 0x70, 0x39, 0x46, 0x27, 0xAC, 0xE5, 0x22, 0xF3,
         0x28, 0xD1, 0x3E, 0xFF, 0xE4, 0xFD, 0x9A, 0x4B, 0xE0, 0x69,
         0x36, 0xD7, 0x1C, 0x15, 0x12, 0xA3, 0x98, 0x01, 0x2E, 0xAF,
         0x54, 0x2D, 0x8A, 0xFB, 0x50, 0x99, 0x26, 0x87, 0x8C, 0x45,
         0x02, 0x53, 0x08, 0x31, 0x1E, 0x5F, 0xC4, 0x5D, 0x7A, 0xAB,
         0xC0, 0xC9, 0x16, 0x37, 0xFC, 0x75, 0xF2, 0x03, 0x78, 0x61,
         0x0E, 0x0F, 0x34, 0x8D, 0x6A, 0x5B, 0x30, 0xF9, 0x06, 0xE7,
         0x6C, 0xA5, 0xE2, 0xB3, 0xE8, 0x91, 0xFE, 0xBF, 0xA4, 0xBD,
         0x5A, 0x0B, 0xA0, 0x29, 0xF6, 0x97, 0xDC, 0xD5, 0xD2, 0x63,
         0x58, 0xC1, 0xEE, 0x6F, 0x14, 0xED, 0x4A, 0xBB, 0x10, 0x59,
         0xE6, 0x47, 0x4C, 0x05, 0xC2, 0x13, 0xC8, 0xF1, 0xDE, 0x1F,
         0x84, 0x1D, 0x3A, 0x6B, 0x80, 0x89, 0xD6, 0xF7, 0xBC, 0x35,
         0xB2, 0xC3, 0x38, 0x21, 0xCE, 0xCF, 0xF4, 0x4D, 0x2A, 0x1B,
         0xF0, 0xB9, 0xC6, 0xA7, 0x2C, 0x65, 0xA2, 0x73, 0xA8, 0x51,
         0xBE, 0x7F, 0x64, 0x7D, 0x1A, 0xCB, 0x60, 0xE9, 0xB6, 0x57,
         0x9C, 0x95, 0x92, 0x23, 0x18, 0x81, 0xAE, 0x2F, 0xD4, 0xAD,
         0x0A, 0x7B, 0xD0, 0x19, 0xA6, 0x07, 0x0C, 0xC5, 0x82, 0xD3,
         0x88, 0xB1, 0x9E, 0xDF, 0x44, 0xDD, 0xFA, 0x2B, 0x40, 0x49,
         0x96, 0xB7, 0x7C, 0xF5, 0x72, 0x83, 0xF8, 0xE1, 0x8E, 0x8F,
         0xB4, 0x0D, 0xEA, 0xDB, 0xB0, 0x79, 0x86, 0x67, 0xEC, 0x25,
         0x62, 0x33, 0x68, 0x11, 0x7E, 0x3F, 0x24, 0x3D, 0xDA, 0x8B,
         0x20, 0xA9, 0x76, 0x17, 0x5C, 0x55, 0x52, 0xE3, 0xD8, 0x41,
         0x6E, 0xEF, 0x94, 0x6D, 0xCA, 0x3B, 0x90, 0xD9, 0x66, 0xC7,
         0xCC, 0x85, 0x42, 0x93, 0x48, 0x71, 0x5E, 0x9F, 0x04, 0x9D,
         0xBA, 0xEB, 0x00, 0x09, 0x56, 0x77, 0x3C, 0xB5, 0x32, 0x43,
         0xB8, 0xA1, 0x4E, 0x4F, 0x74, 0xCD]
_round_keys = [0x0BAD6B3201, 0x0DEADBEEF00000000, 0x5D6B532CD00, 0x56DF778000000000, 0x175AD4CB3EBD858, 0x0DDE0000000000000, 0x0A9967D7B0BB071EF, 0x2EB5, 0x0B0BB071EF0ABCDEF, 0x2EB5A9967D7, 0x855E6F7800ABDAB5, 0x0D4CB3EBD85D838F7, 0x0AF6AD7532C513BF8, 0x60E3DE1579BDE002, 0x77F0C1C7BC813E94, 0x0C0055ED5AEA658A2, 0x94C0055ED5056BB7, 0x0A277F0C1C7BC813E, 0x0D13BF860E3758D70, 0x4A6002AF6A82B5DB, 0x9800ABDAA006BB1B, 0x4EFE1838DD635C12, 0x0C3071BAC6B299EEF, 0x157B5400D76369DF, 0x400D76369D57FD9E, 0x0BAC6B299EEF157B5, 0x0CF778ABDAAABA65E, 0x0B4EABFECF5D63594, 0x0D758D6533D75E719, 0x0AAAE997AD3AAFFB3, 0x55FF67AEB1076B95, 0x0EBCE33555D32F5A7,
               0x0F5A755FF67057CE8, 0x6B95EBCE33555D32, 0x997AD3AAFF184F51, 0x7435CAF5E719AAAE, 0x0A65EB4EABF6DDE3B, 0x5D0D72BD79C66AAB, 0x0CBD69D57ED100A84, 0x0A1AE57AF38CD5574, 0x69D57ED1000387F5, 0x0E57AF38CD5574CBD, 0x0F688001C3F04E638, 0x9C66AABA65EB4EAB, 0x70FC1398E2DA5745, 0x0E997AD3AAFDA2000, 0x0C5B4AE8BD384979A, 0x5FB44000E1F82731, 0x84979A5FB4EBCD0E, 0x0F82731C5B4AE8BD3, 0x0E6877C13984917B8, 0x45E9C24BCD2FDA75, 0x0EE117A7092588619, 0x9D79A1DF04E61245, 0x33AF343BE0370FA7, 0x0BDC22F4E124B10C3, 0x0DC22F4E1241AC1DC, 0x3AF343BE0370FA7B, 0x9A1DF01B8778130E, 0x17A70920D60EE1D7, 0x2483583B87F5A598, 0x0C06E1DE04C385E9C, 0x0C09870BD38E2CB5F, 0x770FEB4B3180DC3B]

__enc = [0xfcb1c794d07e590d, 0xbf163efcab46fdf2,
         0xe5a0fcfa17673ce7, 0x149dafbd7289845]
# __enc = [0x1068E1E5EEF92B2C, 0x3595BA73BC5A6BE,
#          0x0C5D83B1ECF84D295, 0x6E3FD231D3F8ACB6]
ans = 0

for k in range(2):
    cnt = 0
    comp = [__enc[k*2+1], __enc[k*2]]
    for i in range(31, -1, -1):
        tmp1 = comp[cnt+1] ^ _round_keys[i*2+1]
        tmp2 = 0
        cnt1 = 0
        while (tmp1 != 0):
            _tmp = _sbox[tmp1 & 0xff]
            tmp1 >>= 8
            tmp2 += (_tmp << cnt1)
            cnt1 += 8
        cur = comp[cnt] ^ _round_keys[i*2] ^ tmp2
        print(hex(cur))
        comp.append(cur)
        print()
        cnt += 1
    ans <<= 64
    ans += comp[-1]
    ans <<= 64
    ans += comp[-2]

print(hex(ans))
# 0x4c33414b7b6974735f616c6c5f737461307465645f776974605f437d04040404
# L3AK{its_all_sta0ted_wit`_C}
